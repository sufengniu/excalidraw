// Example API integration for LLM-generated diagrams

// Example 1: Fetching LLM-generated Excalidraw data
export async function fetchLLMGeneratedExcalidraw(prompt) {
  try {
    const response = await fetch('/api/generate-diagram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        outputFormat: 'excalidraw',
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to generate diagram');
    }

    const data = await response.json();
    
    // The API should return Excalidraw-compatible JSON
    return {
      elements: data.elements || [],
      appState: data.appState || {},
      files: data.files || {},
    };
  } catch (error) {
    console.error('Error generating Excalidraw diagram:', error);
    throw error;
  }
}

// Example 2: Fetching LLM-generated Mermaid diagram
export async function fetchLLMGeneratedMermaid(prompt) {
  try {
    const response = await fetch('/api/generate-diagram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        outputFormat: 'mermaid',
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to generate diagram');
    }

    const data = await response.json();
    return data.mermaidCode; // Should return Mermaid syntax as string
  } catch (error) {
    console.error('Error generating Mermaid diagram:', error);
    throw error;
  }
}

// Example 3: Saving user-modified diagram back to server
export async function saveDiagram(diagramData, metadata = {}) {
  try {
    const response = await fetch('/api/diagrams', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        diagram: diagramData,
        metadata: {
          ...metadata,
          updatedAt: new Date().toISOString(),
        },
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to save diagram');
    }

    const result = await response.json();
    return result.id; // Return the saved diagram ID
  } catch (error) {
    console.error('Error saving diagram:', error);
    throw error;
  }
}

// Example 4: Loading a previously saved diagram
export async function loadDiagram(diagramId) {
  try {
    const response = await fetch(`/api/diagrams/${diagramId}`);
    
    if (!response.ok) {
      throw new Error('Failed to load diagram');
    }

    const data = await response.json();
    return data.diagram;
  } catch (error) {
    console.error('Error loading diagram:', error);
    throw error;
  }
}

// Example 5: Converting between formats
export async function convertDiagramFormat(diagram, fromFormat, toFormat) {
  try {
    const response = await fetch('/api/convert-diagram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        diagram,
        fromFormat,
        toFormat,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to convert diagram');
    }

    const data = await response.json();
    return data.convertedDiagram;
  } catch (error) {
    console.error('Error converting diagram:', error);
    throw error;
  }
}

// Example usage in a React component:
/*
import { fetchLLMGeneratedExcalidraw, saveDiagram } from './api-integration';

function MyComponent() {
  const [diagram, setDiagram] = useState(null);

  const generateDiagram = async () => {
    const prompt = "Create a flowchart for user authentication";
    const generatedDiagram = await fetchLLMGeneratedExcalidraw(prompt);
    setDiagram(generatedDiagram);
  };

  const handleSave = async (updatedDiagram) => {
    const diagramId = await saveDiagram(updatedDiagram, {
      title: "User Authentication Flow",
      description: "Generated by LLM and modified by user",
    });
    console.log('Saved with ID:', diagramId);
  };

  return (
    <div>
      <button onClick={generateDiagram}>Generate Diagram</button>
      {diagram && (
        <ExcalidrawWrapper 
          initialData={diagram}
          onDataChange={handleSave}
        />
      )}
    </div>
  );
}
*/